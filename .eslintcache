[{"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\index.js":"1","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\App.js":"2","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Router.js":"3","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Auth.js":"4","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Home.js":"5","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\fbase.js":"6","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Navigation.js":"7","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Profile.js":"8","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweet.js":"9","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweetFactory.js":"10","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\AuthForm.js":"11"},{"size":229,"mtime":1613705949751,"results":"12","hashOfConfig":"13"},{"size":2238,"mtime":1613539277144,"results":"14","hashOfConfig":"13"},{"size":2181,"mtime":1613707552641,"results":"15","hashOfConfig":"13"},{"size":911,"mtime":1613539060486,"results":"16","hashOfConfig":"13"},{"size":1580,"mtime":1613538670567,"results":"17","hashOfConfig":"13"},{"size":854,"mtime":1613009135231,"results":"18","hashOfConfig":"13"},{"size":1153,"mtime":1613706211116,"results":"19","hashOfConfig":"13"},{"size":1705,"mtime":1613539249902,"results":"20","hashOfConfig":"13"},{"size":2596,"mtime":1613706912801,"results":"21","hashOfConfig":"13"},{"size":3830,"mtime":1613707445178,"results":"22","hashOfConfig":"13"},{"size":2619,"mtime":1613705714903,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8dxe6f",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\index.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\App.js",[],["50","51"],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Router.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Auth.js",["52"],"import AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    const data = await authService.signInWithPopup(provider);\r\n    console.log(data);\r\n  };\r\n  return (\r\n    <div>\r\n      <AuthForm />\r\n      <div>\r\n        <button onClick={onSocialClick} name=\"google\">\r\n          Continue with Google\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\">\r\n          Continue with Github\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Home.js",["53"],"import JSweet from \"components/JSweet\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport JSweetFactory from \"components/JSweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [jsweets, setJSweets] = useState([]); // 배열로\r\n  // component가 mount 될 때, getJSweets를 실행\r\n  // getJSweets는 dbService를 불러와서 colletion(\"jsweets\"), 그리고 get을 써서 다 가져옴\r\n\r\n  useEffect(() => {\r\n    dbService.collection(\"jsweets\").onSnapshot((snapshot) => {\r\n      // onSnapshot (= listener) : DB의 변화를 실시간으로 알려줌(realtime)\r\n      // doc가 우리가 가지고 있는 jsweets 배열(게시물)\r\n      const jsweetArray = snapshot.docs.map((doc) => ({\r\n        // 새로운 snapshot을 배열을 만들어 state에 배열을 집어 넣음\r\n        // 모든 아이템은 아래 형태로 받음\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setJSweets(jsweetArray);\r\n    });\r\n  }, []);\r\n\r\n  // submit 할 때마다 document를 생성\r\n  return (\r\n    <div>\r\n      <JSweetFactory userObj={userObj} />\r\n      <div>\r\n        {jsweets.map((jsweet) => (\r\n          <JSweet\r\n            key={jsweet.id}\r\n            jsweetObj={jsweet} // jsweetObj는 jweet의 모든 데이터 (author, text, createdAt)\r\n            isOwner={jsweet.creatorId === userObj.uid}\r\n          /> // isOwner는 true || false 값 가짐, 글쓴이(만든사람 === 만든 사람 ID)만 볼 수 있게 하기 위함\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\fbase.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Navigation.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Profile.js",["54"],"import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n  // useHistory() -> history 상수를 만들어 push 함\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    // authService.currentUser.uid -> userObj를 소스 공유 없이 할 경우 uid 가져오는 방법\r\n    history.push(\"/\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n        />\r\n        <input type=\"submit\" value=\"Update Profile\" />\r\n      </form>\r\n      <button onClick={onLogOutClick}>Log Out</button>\r\n    </>\r\n  );\r\n};\r\n\r\n//     // query 문\r\n// const getMyJSweets = async () => {\r\n//   const jsweets = await dbService\r\n//     .collection(\"jsweets\")\r\n//     .where(\"creatorId\", \"==\", userObj.uid) // where() => 필터링 방법\r\n//     .orderBy(\"createdAt\") // orderBy() => 결과를 어떠한 순서에 따라 필터링\r\n//     .get();\r\n//   console.log(jsweets.docs.map((doc) => doc.data()));\r\n// };\r\n// useEffect(() => {\r\n//   getMyJSweets();\r\n// }, []);\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweet.js",["55"],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweetFactory.js",["56"],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\AuthForm.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":3,"column":17,"nodeType":"63","messageId":"64","endLine":3,"endColumn":25},{"ruleId":"61","severity":1,"message":"65","line":2,"column":21,"nodeType":"63","messageId":"64","endLine":2,"endColumn":35},{"ruleId":"66","severity":1,"message":"67","line":5,"column":1,"nodeType":"68","endLine":44,"endColumn":3},{"ruleId":"69","severity":1,"message":"70","line":56,"column":39,"nodeType":"71","endLine":56,"endColumn":76},{"ruleId":"69","severity":1,"message":"70","line":92,"column":11,"nodeType":"71","endLine":97,"endColumn":13},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'storageService' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]