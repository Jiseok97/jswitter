[{"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\index.js":"1","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\App.js":"2","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Router.js":"3","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Auth.js":"4","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Home.js":"5","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\fbase.js":"6","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Navigation.js":"7","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Profile.js":"8","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweet.js":"9"},{"size":206,"mtime":1612233197455,"results":"10","hashOfConfig":"11"},{"size":1434,"mtime":1612932672051,"results":"12","hashOfConfig":"11"},{"size":1774,"mtime":1612932789624,"results":"13","hashOfConfig":"11"},{"size":3060,"mtime":1612492494227,"results":"14","hashOfConfig":"11"},{"size":4127,"mtime":1613009568913,"results":"15","hashOfConfig":"11"},{"size":854,"mtime":1613009135231,"results":"16","hashOfConfig":"11"},{"size":305,"mtime":1612493748211,"results":"17","hashOfConfig":"11"},{"size":446,"mtime":1612510336931,"results":"18","hashOfConfig":"11"},{"size":2046,"mtime":1613135962966,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"8dxe6f",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\index.js",[],["40","41"],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\App.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Router.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Auth.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Home.js",["42"],"import JSweet from \"components/JSweet\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [jsweet, setJSweet] = useState(\"\"); // form을 위한 state\r\n  const [jsweets, setJSweets] = useState([]); // 배열로\r\n  const [attachment, setAttachment] = useState();\r\n\r\n  // component가 mount 될 때, getJSweets를 실행\r\n  // getJSweets는 dbService를 불러와서 colletion(\"jsweets\"), 그리고 get을 써서 다 가져옴\r\n\r\n  useEffect(() => {\r\n    dbService.collection(\"jsweets\").onSnapshot((snapshot) => {\r\n      // onSnapshot (= listener) : DB의 변화를 실시간으로 알려줌(realtime)\r\n      // doc가 우리가 가지고 있는 jsweets 배열(게시물)\r\n      const jsweetArray = snapshot.docs.map((doc) => ({\r\n        // 새로운 snapshot을 배열을 만들어 state에 배열을 집어 넣음\r\n        // 모든 아이템은 아래 형태로 받음\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setJSweets(jsweetArray);\r\n    });\r\n  }, []);\r\n\r\n  // jsweets 가져오는 방법(게시물)\r\n  // (1) Array를 통해 onSnapshot으로 setJSweets하는 방법 (현 방식,(realtime))\r\n  // (2) forEach를 쓰는 방법 ( 구방식, query 이용하는 듯 )\r\n\r\n  const onSubmit = async (event) => {\r\n    // async -> await가 promise로 리턴하니까 넣어줌\r\n    event.preventDefault();\r\n    const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n    const response = await fileRef.putString(attachment, \"data_url\");\r\n    console.log(response);\r\n\r\n    // await dbService.collection(\"jsweets\").add({\r\n    //   // dbService.collection.add를 쓰기 위해선 firestore import 해주기 !\r\n    //   // firebaseStore에 jsweet가 collection으로 생성됨\r\n    //   // \"jsweets\"는 collectionPath 경로\r\n    //   // add 는 그냥 data가 들어가는 거\r\n    //   // 위를 합치면, 명시된 데이터를 담은 새로운 document를 collections에 추가하는 거\r\n    //   text: jsweet, //우리의 document의 key\r\n    //   createdAt: Date.now(),\r\n    //   creatorId: userObj.uid,\r\n    // });\r\n    // setJSweet(\"\"); // submit 하고 나면, setJSweet() 해주기\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event; // event 안에 있는 target 안에 있는 value를 가져옴\r\n    setJSweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event; // event 안에서 target 안으로 가서 파일을 받아 오는 것 의미\r\n    const theFile = files[0]; // 1) 파일을 갖고\r\n    const reader = new FileReader(); // 2) reader을 만들고\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile); // 3) readAsDataURL 을 사용해서 파일을 읽기\r\n  };\r\n  const onClearAttachment = () => setAttachment(null);\r\n\r\n  // submit 할 때마다 document를 생성\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          value={jsweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n        <input type=\"submit\" value=\"JSweet\" />\r\n        {attachment && (\r\n          <div>\r\n            <img src={attachment} width=\"80px\" height=\"80px\" />\r\n            <button onClick={onClearAttachment}>Clear</button>\r\n          </div>\r\n        )}\r\n      </form>\r\n      <div>\r\n        {jsweets.map((jsweet) => (\r\n          <JSweet\r\n            key={jsweet.id}\r\n            jsweetObj={jsweet} // jsweetObj는 jweet의 모든 데이터 (author, text, createdAt)\r\n            isOwner={jsweet.creatorId === userObj.uid}\r\n          /> // isOwner는 true || false 값 가짐, 글쓴이(만든사람 === 만든 사람 ID)만 볼 수 있게 하기 위함\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\fbase.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Navigation.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Profile.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweet.js",["43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":88,"column":13,"nodeType":"50","endLine":88,"endColumn":64},{"ruleId":"48","severity":1,"message":"49","line":50,"column":13,"nodeType":"50","endLine":50,"endColumn":77},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]