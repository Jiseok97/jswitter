[{"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\index.js":"1","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\App.js":"2","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Router.js":"3","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Auth.js":"4","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Home.js":"5","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\fbase.js":"6","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Navigation.js":"7","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Profile.js":"8","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweet.js":"9","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweetFactory.js":"10","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\AuthForm.js":"11"},{"size":206,"mtime":1612233197455,"results":"12","hashOfConfig":"13"},{"size":2238,"mtime":1613539277144,"results":"14","hashOfConfig":"13"},{"size":1929,"mtime":1613439972149,"results":"15","hashOfConfig":"13"},{"size":911,"mtime":1613539060486,"results":"16","hashOfConfig":"13"},{"size":1580,"mtime":1613538670567,"results":"17","hashOfConfig":"13"},{"size":854,"mtime":1613009135231,"results":"18","hashOfConfig":"13"},{"size":338,"mtime":1613354251676,"results":"19","hashOfConfig":"13"},{"size":1705,"mtime":1613539249902,"results":"20","hashOfConfig":"13"},{"size":2185,"mtime":1613186481242,"results":"21","hashOfConfig":"13"},{"size":2971,"mtime":1613538679614,"results":"22","hashOfConfig":"13"},{"size":2645,"mtime":1613628868095,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"8dxe6f",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\index.js",[],["52","53"],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\App.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Router.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Auth.js",["54"],"import AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    const data = await authService.signInWithPopup(provider);\r\n    console.log(data);\r\n  };\r\n  return (\r\n    <div>\r\n      <AuthForm />\r\n      <div>\r\n        <button onClick={onSocialClick} name=\"google\">\r\n          Continue with Google\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\">\r\n          Continue with Github\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Home.js",["55"],"import JSweet from \"components/JSweet\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport JSweetFactory from \"components/JSweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [jsweets, setJSweets] = useState([]); // 배열로\r\n  // component가 mount 될 때, getJSweets를 실행\r\n  // getJSweets는 dbService를 불러와서 colletion(\"jsweets\"), 그리고 get을 써서 다 가져옴\r\n\r\n  useEffect(() => {\r\n    dbService.collection(\"jsweets\").onSnapshot((snapshot) => {\r\n      // onSnapshot (= listener) : DB의 변화를 실시간으로 알려줌(realtime)\r\n      // doc가 우리가 가지고 있는 jsweets 배열(게시물)\r\n      const jsweetArray = snapshot.docs.map((doc) => ({\r\n        // 새로운 snapshot을 배열을 만들어 state에 배열을 집어 넣음\r\n        // 모든 아이템은 아래 형태로 받음\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setJSweets(jsweetArray);\r\n    });\r\n  }, []);\r\n\r\n  // submit 할 때마다 document를 생성\r\n  return (\r\n    <div>\r\n      <JSweetFactory userObj={userObj} />\r\n      <div>\r\n        {jsweets.map((jsweet) => (\r\n          <JSweet\r\n            key={jsweet.id}\r\n            jsweetObj={jsweet} // jsweetObj는 jweet의 모든 데이터 (author, text, createdAt)\r\n            isOwner={jsweet.creatorId === userObj.uid}\r\n          /> // isOwner는 true || false 값 가짐, 글쓴이(만든사람 === 만든 사람 ID)만 볼 수 있게 하기 위함\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\fbase.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Navigation.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Profile.js",["56"],"import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n  // useHistory() -> history 상수를 만들어 push 함\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    // authService.currentUser.uid -> userObj를 소스 공유 없이 할 경우 uid 가져오는 방법\r\n    history.push(\"/\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n        />\r\n        <input type=\"submit\" value=\"Update Profile\" />\r\n      </form>\r\n      <button onClick={onLogOutClick}>Log Out</button>\r\n    </>\r\n  );\r\n};\r\n\r\n//     // query 문\r\n// const getMyJSweets = async () => {\r\n//   const jsweets = await dbService\r\n//     .collection(\"jsweets\")\r\n//     .where(\"creatorId\", \"==\", userObj.uid) // where() => 필터링 방법\r\n//     .orderBy(\"createdAt\") // orderBy() => 결과를 어떠한 순서에 따라 필터링\r\n//     .get();\r\n//   console.log(jsweets.docs.map((doc) => doc.data()));\r\n// };\r\n// useEffect(() => {\r\n//   getMyJSweets();\r\n// }, []);\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweet.js",["57"],"import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\n// isOwner => 내가 주인이면 이 버튼 fragment 들을 볼 수 있음\r\nconst JSweet = ({ jsweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false); // editing(수정) 모드인지 아닌지 구분\r\n  const [newJSweet, setNewJSweet] = useState(jsweetObj.text); // input의 값(text) 수정 -> newJSweet을 수정하는 것\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you want to delete this jsweet?\");\r\n    if (ok) {\r\n      // delete jsweet\r\n      // doc 경로는 firebase보면 됨 ( document -> collection -> jsweet의 아이디)\r\n      await dbService.doc(`jsweets/${jsweetObj.id}`).delete();\r\n      await storageService.refFromURL(jsweetObj.attachmentUrl).delete(); // url에서 reference 얻는 방법(refFromURL)\r\n    }\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`jsweets/${jsweetObj.id}`).update({\r\n      text: newJSweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewJSweet(value);\r\n  };\r\n  return (\r\n    <div>\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your jsweet\"\r\n              value={newJSweet}\r\n              required\r\n              onChange={onChange}\r\n            />\r\n            <input type=\"submit\" value=\"Update JSweet\" />\r\n          </form>\r\n          <button onClick={toggleEditing}>Cancle</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{jsweetObj.text}</h4>\r\n          {jsweetObj.attachmentUrl && (\r\n            <img src={jsweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\r\n          )}\r\n          {isOwner && (\r\n            <>\r\n              <button onClick={onDeleteClick}>Delete JSweet</button>\r\n              <button onClick={toggleEditing}>Edit JSweet</button>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JSweet;\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweetFactory.js",["58"],"import { dbService, storageService } from \"fbase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst JSweetFactory = ({ userObj }) => {\r\n  const [jsweet, setJSweet] = useState(\"\"); // form을 위한 state\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  // jsweets 가져오는 방법(게시물)\r\n  // (1) Array를 통해 onSnapshot으로 setJSweets하는 방법 (현 방식,(realtime))\r\n  // (2) forEach를 쓰는 방법 ( 구방식, query 이용하는 듯 )\r\n  const onSubmit = async (event) => {\r\n    // async -> await가 promise로 리턴하니까 넣어줌\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const jsweetObj = {\r\n      text: jsweet, //우리의 document의 key\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"jsweets\").add(jsweetObj);\r\n    // dbService.collection.add를 쓰기 위해선 firestore import 해주기 !\r\n    // firebaseStore에 jsweet가 collection으로 생성됨\r\n    // \"jsweets\"는 collectionPath 경로\r\n    // add 는 그냥 data가 들어가는 거\r\n    // 위를 합치면, 명시된 데이터를 담은 새로운 document를 collections에 추가하는 거\r\n\r\n    setJSweet(\"\"); // submit 하고 나면, setJSweet() 해주기\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event; // event 안에 있는 target 안에 있는 value를 가져옴\r\n    setJSweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event; // event 안에서 target 안으로 가서 파일을 받아 오는 것 의미\r\n    const theFile = files[0]; // 1) 파일을 갖고\r\n    const reader = new FileReader(); // 2) reader을 만들고\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile); // 3) readAsDataURL 을 사용해서 파일을 읽기\r\n  };\r\n  const onClearAttachment = () => setAttachment(null);\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        value={jsweet}\r\n        onChange={onChange}\r\n        type=\"text\"\r\n        placeholder=\"What's on your mind?\"\r\n        maxLength={120}\r\n      />\r\n      <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n      <input type=\"submit\" value=\"JSweet\" />\r\n      {attachment && (\r\n        <div>\r\n          <img src={attachment} width=\"80px\" height=\"80px\" />\r\n          <button onClick={onClearAttachment}>Clear</button>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default JSweetFactory;\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\AuthForm.js",["59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":3,"column":17,"nodeType":"66","messageId":"67","endLine":3,"endColumn":25},{"ruleId":"64","severity":1,"message":"68","line":2,"column":21,"nodeType":"66","messageId":"67","endLine":2,"endColumn":35},{"ruleId":"69","severity":1,"message":"70","line":5,"column":1,"nodeType":"71","endLine":44,"endColumn":3},{"ruleId":"72","severity":1,"message":"73","line":51,"column":13,"nodeType":"74","endLine":51,"endColumn":77},{"ruleId":"72","severity":1,"message":"73","line":72,"column":11,"nodeType":"74","endLine":72,"endColumn":62},{"ruleId":"64","severity":1,"message":"75","line":4,"column":7,"nodeType":"66","messageId":"67","endLine":4,"endColumn":17},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'storageService' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'inputSytle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]