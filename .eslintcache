[{"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\index.js":"1","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\App.js":"2","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Router.js":"3","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Auth.js":"4","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Home.js":"5","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\fbase.js":"6","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Navigation.js":"7","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Profile.js":"8","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweet.js":"9","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweetFactory.js":"10","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\AuthForm.js":"11"},{"size":229,"mtime":1613705949751,"results":"12","hashOfConfig":"13"},{"size":2286,"mtime":1613883557545,"results":"14","hashOfConfig":"13"},{"size":2181,"mtime":1613811890698,"results":"15","hashOfConfig":"13"},{"size":1363,"mtime":1613809771453,"results":"16","hashOfConfig":"13"},{"size":1628,"mtime":1613707729855,"results":"17","hashOfConfig":"13"},{"size":854,"mtime":1613009135231,"results":"18","hashOfConfig":"13"},{"size":960,"mtime":1613811925762,"results":"19","hashOfConfig":"13"},{"size":1961,"mtime":1613809405203,"results":"20","hashOfConfig":"13"},{"size":2596,"mtime":1613706912801,"results":"21","hashOfConfig":"13"},{"size":3830,"mtime":1613707445178,"results":"22","hashOfConfig":"13"},{"size":2619,"mtime":1613811066429,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"8dxe6f",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\index.js",[],["51","52"],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\App.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Router.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Auth.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Home.js",["53"],"import JSweet from \"components/JSweet\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport JSweetFactory from \"components/JSweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [jsweets, setJSweets] = useState([]); // 배열로\r\n  // component가 mount 될 때, getJSweets를 실행\r\n  // getJSweets는 dbService를 불러와서 colletion(\"jsweets\"), 그리고 get을 써서 다 가져옴\r\n\r\n  useEffect(() => {\r\n    dbService.collection(\"jsweets\").onSnapshot((snapshot) => {\r\n      // onSnapshot (= listener) : DB의 변화를 실시간으로 알려줌(realtime)\r\n      // doc가 우리가 가지고 있는 jsweets 배열(게시물)\r\n      const jsweetArray = snapshot.docs.map((doc) => ({\r\n        // 새로운 snapshot을 배열을 만들어 state에 배열을 집어 넣음\r\n        // 모든 아이템은 아래 형태로 받음\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setJSweets(jsweetArray);\r\n    });\r\n  }, []);\r\n\r\n  // submit 할 때마다 document를 생성\r\n  return (\r\n    <div className=\"container\">\r\n      <JSweetFactory userObj={userObj} />\r\n      <div style={{ marginTop: 30 }}>\r\n        {jsweets.map((jsweet) => (\r\n          <JSweet\r\n            key={jsweet.id}\r\n            jsweetObj={jsweet} // jsweetObj는 jweet의 모든 데이터 (author, text, createdAt)\r\n            isOwner={jsweet.creatorId === userObj.uid}\r\n          /> // isOwner는 true || false 값 가짐, 글쓴이(만든사람 === 만든 사람 ID)만 볼 수 있게 하기 위함\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\fbase.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\Navigation.js",[],"C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\routes\\Profile.js",["54"],"import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n  // useHistory() -> history 상수를 만들어 push 함\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    // authService.currentUser.uid -> userObj를 소스 공유 없이 할 경우 uid 가져오는 방법\r\n    history.push(\"/\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          autoFocus\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{ marginTop: 10 }}\r\n        />\r\n      </form>\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\n//     // query 문\r\n// const getMyJSweets = async () => {\r\n//   const jsweets = await dbService\r\n//     .collection(\"jsweets\")\r\n//     .where(\"creatorId\", \"==\", userObj.uid) // where() => 필터링 방법\r\n//     .orderBy(\"createdAt\") // orderBy() => 결과를 어떠한 순서에 따라 필터링\r\n//     .get();\r\n//   console.log(jsweets.docs.map((doc) => doc.data()));\r\n// };\r\n// useEffect(() => {\r\n//   getMyJSweets();\r\n// }, []);\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweet.js",["55"],"import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// isOwner => 내가 주인이면 이 버튼 fragment 들을 볼 수 있음\r\nconst JSweet = ({ jsweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false); // editing(수정) 모드인지 아닌지 구분\r\n  const [newJSweet, setNewJSweet] = useState(jsweetObj.text); // input의 값(text) 수정 -> newJSweet을 수정하는 것\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you want to delete this jsweet?\");\r\n    if (ok) {\r\n      // delete jsweet\r\n      // doc 경로는 firebase보면 됨 ( document -> collection -> jsweet의 아이디)\r\n      await dbService.doc(`jsweets/${jsweetObj.id}`).delete();\r\n      await storageService.refFromURL(jsweetObj.attachmentUrl).delete(); // url에서 reference 얻는 방법(refFromURL)\r\n    }\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`jsweets/${jsweetObj.id}`).update({\r\n      text: newJSweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewJSweet(value);\r\n  };\r\n  return (\r\n    <div className=\"jsweet\">\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container jsweetEdit\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your jsweet\"\r\n              value={newJSweet}\r\n              required\r\n              autoFocus\r\n              onChange={onChange}\r\n              classname=\"formInput\"\r\n            />\r\n            <input type=\"submit\" value=\"Update JSweet\" className=\"formBtn\" />\r\n          </form>\r\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancel\r\n          </span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{jsweetObj.text}</h4>\r\n          {jsweetObj.attachmentUrl && <img src={jsweetObj.attachmentUrl} />}\r\n          {isOwner && (\r\n            <div class=\"jsweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JSweet;\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\JSweetFactory.js",["56"],"import { dbService, storageService } from \"fbase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst JSweetFactory = ({ userObj }) => {\r\n  const [jsweet, setJSweet] = useState(\"\"); // form을 위한 state\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  // jsweets 가져오는 방법(게시물)\r\n  // (1) Array를 통해 onSnapshot으로 setJSweets하는 방법 (현 방식,(realtime))\r\n  // (2) forEach를 쓰는 방법 ( 구방식, query 이용하는 듯 )\r\n  const onSubmit = async (event) => {\r\n    if (jsweet === \"\") {\r\n      return;\r\n    }\r\n    // async -> await가 promise로 리턴하니까 넣어줌\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const jsweetObj = {\r\n      text: jsweet, //우리의 document의 key\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"jsweets\").add(jsweetObj);\r\n    // dbService.collection.add를 쓰기 위해선 firestore import 해주기 !\r\n    // firebaseStore에 jsweet가 collection으로 생성됨\r\n    // \"jsweets\"는 collectionPath 경로\r\n    // add 는 그냥 data가 들어가는 거\r\n    // 위를 합치면, 명시된 데이터를 담은 새로운 document를 collections에 추가하는 거\r\n\r\n    setJSweet(\"\"); // submit 하고 나면, setJSweet() 해주기\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event; // event 안에 있는 target 안에 있는 value를 가져옴\r\n    setJSweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event; // event 안에서 target 안으로 가서 파일을 받아 오는 것 의미\r\n    const theFile = files[0]; // 1) 파일을 갖고\r\n    const reader = new FileReader(); // 2) reader을 만들고\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile); // 3) readAsDataURL 을 사용해서 파일을 읽기\r\n  };\r\n  const onClearAttachment = () => setAttachment(\"\");\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={jsweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n      />\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n          />\r\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default JSweetFactory;\r\n","C:\\Users\\이지석\\Desktop\\자기 개발\\Projects\\jswitter\\src\\components\\AuthForm.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":21,"nodeType":"63","messageId":"64","endLine":2,"endColumn":35},{"ruleId":"65","severity":1,"message":"66","line":5,"column":1,"nodeType":"67","endLine":53,"endColumn":3},{"ruleId":"68","severity":1,"message":"69","line":56,"column":39,"nodeType":"70","endLine":56,"endColumn":76},{"ruleId":"68","severity":1,"message":"69","line":92,"column":11,"nodeType":"70","endLine":97,"endColumn":13},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'storageService' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]