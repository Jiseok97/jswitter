{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/JSweet.js","components/JSweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","databaseURL","REACT_APP_DATABASE_URL","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","JSweet","jsweetObj","isOwner","editing","setEditing","text","newJSweet","setNewJSweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","classname","src","class","faTrash","faPencilAlt","JSweetFactory","userObj","jsweet","setJSweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","jsweets","setJSweets","useEffect","onSnapshot","snapshot","jsweetArray","docs","map","marginTop","Navigation","display","justifyContent","to","marginRight","faUser","displayName","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAMMA,G,wBAAiB,CACrBC,OAAQC,0CACRC,WAAYD,iCACZE,YAAaF,6bAAYG,uBACzBC,UAAWJ,iBACXK,cAAeL,6BACfM,kBAAmBN,eACnBO,MAAOP,8CAGTQ,IAASC,cAAcX,GAEhB,IAAMY,EAAmBF,IAEnBG,EAAcH,IAASI,OACvBC,EAAYL,IAASM,YACrBC,EAAiBP,IAASQ,UC4DxBC,EA/EE,WAAO,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAEWF,mBAAS,IAFpB,mBAEdG,EAFc,KAEJC,EAFI,OAGeJ,oBAAS,GAHxB,mBAGdK,EAHc,KAGFC,EAHE,OAIKN,mBAAS,IAJd,mBAIdO,EAJc,KAIPC,EAJO,KAQfC,EAAW,SAACC,GAAW,IAAD,EAGtBA,EADFC,OAAUC,EAFc,EAEdA,KAAMC,EAFQ,EAERA,MAEL,UAATD,EACFV,EAASW,GACS,aAATD,GACTR,EAAYS,IAKVC,EAAQ,uCAAG,WAAOJ,GAAP,eAAAK,EAAA,yDAEfL,EAAMM,iBAFS,UAKTX,EALS,gCASEZ,EAAYwB,+BACvBhB,EACAE,GAXS,OASXe,EATW,+CAeEzB,EAAY0B,2BAA2BlB,EAAOE,GAfhD,QAeXe,EAfW,eAiBbE,QAAQC,IAAIH,GAjBC,kDAmBbV,EAAS,KAAMc,SAnBF,0DAAH,sDAuBd,OACE,qCACE,uBAAMR,SAAUA,EAAUS,UAAU,YAApC,UAEE,uBACEX,KAAK,QACLY,KAAK,QACLC,YAAY,QACZC,UAAQ,EACRb,MAAOZ,EACPQ,SAAUA,EACVc,UAAU,cAEZ,uBACEX,KAAK,WACLY,KAAK,WACLC,YAAY,WACZC,UAAQ,EACRb,MAAOV,EACPM,SAAUA,EACVc,UAAU,cAEZ,uBACEC,KAAK,SACLX,MAAOR,EAAa,iBAAmB,SACvCkB,UAAU,yBAEXhB,GAAS,sBAAMgB,UAAU,YAAhB,SAA6BhB,OAEzC,sBAAMoB,QA9BY,kBAAMrB,GAAc,SAACsB,GAAD,OAAWA,MA8BnBL,UAAU,aAAxC,SACGlB,EAAa,SAAW,uBChClBwB,EAlCF,WACX,IAAMC,EAAa,uCAAG,WAAOpB,GAAP,mBAAAK,EAAA,4DAKP,YAHDH,EACRF,EADFC,OAAUC,MAIVmB,EAAW,IAAIvC,EAAiBE,KAAKsC,mBACnB,WAATpB,IACTmB,EAAW,IAAIvC,EAAiBE,KAAKuC,oBARnB,SAUDxC,EAAYyC,gBAAgBH,GAV3B,OAUdb,EAVc,OAWpBE,QAAQC,IAAIH,GAXQ,2CAAH,sDAanB,OACE,sBAAKK,UAAU,gBAAf,UACE,cAAC,IAAD,CACEY,KAAMC,IACNC,MAAO,UACPC,KAAK,KACLC,MAAO,CAAEC,aAAc,MAEzB,cAAC,EAAD,IACA,sBAAKjB,UAAU,WAAf,UACE,yBAAQI,QAASG,EAAelB,KAAK,SAASW,UAAU,UAAxD,kCACuB,cAAC,IAAD,CAAiBY,KAAMM,SAE9C,yBAAQd,QAASG,EAAelB,KAAK,SAASW,UAAU,UAAxD,kCACuB,cAAC,IAAD,CAAiBY,KAAMO,gB,gBCkCvCC,EAlEA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QAAc,EACX7C,oBAAS,GADE,mBAClC8C,EADkC,KACzBC,EADyB,OAEP/C,mBAAS4C,EAAUI,MAFZ,mBAElCC,EAFkC,KAEvBC,EAFuB,KAGnCC,EAAa,uCAAG,sBAAApC,EAAA,0DACTqC,OAAOC,QAAQ,gDADN,gCAKZ1D,EAAU2D,IAAV,kBAAyBV,EAAUW,KAAMC,SAL7B,uBAMZ3D,EAAe4D,WAAWb,EAAUc,eAAeF,SANvC,2CAAH,qDASbG,EAAgB,kBAAMZ,GAAW,SAACnB,GAAD,OAAWA,MAC5Cd,EAAQ,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,6DACfL,EAAMM,iBADS,SAETrB,EAAU2D,IAAV,kBAAyBV,EAAUW,KAAMK,OAAO,CACpDZ,KAAMC,IAHO,OAKfF,GAAW,GALI,2CAAH,sDAad,OACE,qBAAKxB,UAAU,SAAf,SACGuB,EACC,qCACE,uBAAMhC,SAAUA,EAAUS,UAAU,uBAApC,UACE,uBACEC,KAAK,OACLC,YAAY,mBACZZ,MAAOoC,EACPvB,UAAQ,EACRmC,WAAS,EACTpD,SAjBK,SAACC,GAAW,IAEfG,EACRH,EADFC,OAAUE,MAEZqC,EAAarC,IAcHiD,UAAU,cAEZ,uBAAOtC,KAAK,SAASX,MAAM,gBAAgBU,UAAU,eAEvD,sBAAMI,QAASgC,EAAepC,UAAU,oBAAxC,uBAKF,qCACE,6BAAKqB,EAAUI,OACdJ,EAAUc,eAAiB,qBAAKK,IAAKnB,EAAUc,gBAC/Cb,GACC,sBAAKmB,MAAM,kBAAX,UACE,sBAAMrC,QAASwB,EAAf,SACE,cAAC,IAAD,CAAiBhB,KAAM8B,QAEzB,sBAAMtC,QAASgC,EAAf,SACE,cAAC,IAAD,CAAiBxB,KAAM+B,iB,QC6CxBC,EArGO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACTpE,mBAAS,IADA,mBAC9BqE,EAD8B,KACtBC,EADsB,OAEDtE,mBAAS,IAFR,mBAE9BuE,EAF8B,KAElBC,EAFkB,KAM/B1D,EAAQ,uCAAG,WAAOJ,GAAP,qBAAAK,EAAA,yDACA,KAAXsD,EADW,oDAKf3D,EAAMM,iBACF0C,EAAgB,GACD,KAAfa,EAPW,wBAQPE,EAAgB5E,EACnB6E,MACAC,MAFmB,UAEVP,EAAQQ,IAFE,YAEKC,gBAVd,SAWUJ,EAAcK,UAAUP,EAAY,YAX9C,cAWPQ,EAXO,iBAYSA,EAASL,IAAIM,iBAZtB,QAYbtB,EAZa,sBAcTd,EAAY,CAChBI,KAAMqB,EACNY,UAAWC,KAAKC,MAChBC,UAAWhB,EAAQQ,IACnBlB,iBAlBa,UAoBT/D,EAAU0F,WAAW,WAAWC,IAAI1C,GApB3B,QA2Bf0B,EAAU,IACVE,EAAc,IA5BC,4CAAH,sDAmDd,OACE,uBAAM1D,SAAUA,EAAUS,UAAU,cAApC,UACE,sBAAKA,UAAU,0BAAf,UACE,uBACEA,UAAU,sBACVV,MAAOwD,EACP5D,SA3BS,SAACC,GAAW,IAEfG,EACRH,EADFC,OAAUE,MAEZyD,EAAUzD,IAwBJW,KAAK,OACLC,YAAY,uBACZ8D,UAAW,MAEb,uBAAO/D,KAAK,SAASX,MAAM,SAASU,UAAU,2BAEhD,wBAAOiE,IAAI,cAAcjE,UAAU,sBAAnC,UACE,8CACA,cAAC,IAAD,CAAiBY,KAAMsD,SAEzB,uBACElC,GAAG,cACH/B,KAAK,OACLkE,OAAO,UACPjF,SApCe,SAACC,GAAW,IAIzBiF,EADFjF,EADFC,OAAUiF,MAEU,GAChBC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACC,GAAmB,IAElBC,EACfD,EADFE,cAAiBD,OAEnBzB,EAAcyB,IAEhBJ,EAAOM,cAAcR,IAyBjBpD,MAAO,CACL6D,QAAS,KAGZ7B,GACC,sBAAKhD,UAAU,0BAAf,UACE,qBACEwC,IAAKQ,EACLhC,MAAO,CACL8D,gBAAiB9B,KAGrB,sBAAKhD,UAAU,qBAAqBI,QAnClB,kBAAM6C,EAAc,KAmCtC,UACE,0CACA,cAAC,IAAD,CAAiBrC,KAAMmE,gBC3DpBC,EAnCF,SAAC,GAAiB,IAAfnC,EAAc,EAAdA,QAAc,EACEpE,mBAAS,IADX,mBACrBwG,EADqB,KACZC,EADY,KAoB5B,OAfAC,qBAAU,WACR/G,EAAU0F,WAAW,WAAWsB,YAAW,SAACC,GAG1C,IAAMC,EAAcD,EAASE,KAAKC,KAAI,SAACzD,GAAD,oBAGpCC,GAAID,EAAIC,IACLD,EAAIpC,WAETuF,EAAWI,QAEZ,IAID,sBAAKtF,UAAU,YAAf,UACE,cAAC,EAAD,CAAe6C,QAASA,IACxB,qBAAK7B,MAAO,CAAEyE,UAAW,IAAzB,SACGR,EAAQO,KAAI,SAAC1C,GAAD,OACX,cAAC,EAAD,CAEEzB,UAAWyB,EACXxB,QAASwB,EAAOe,YAAchB,EAAQQ,KAFjCP,EAAOd,aCHT0D,EAtBI,SAAC,GAAD,IAAG7C,EAAH,EAAGA,QAAH,OACjB,8BACE,qBAAI7B,MAAO,CAAE2E,QAAS,OAAQC,eAAgB,SAAUH,UAAW,IAAnE,UACE,6BACE,cAAC,IAAD,CAAMI,GAAG,IAAI7E,MAAO,CAAE8E,YAAa,IAAnC,SACE,cAAC,IAAD,CAAiBlF,KAAMC,IAAWC,MAAO,UAAWC,KAAK,WAG7D,6BACE,eAAC,IAAD,CAAM8E,GAAG,WAAW7F,UAAU,WAA9B,UACE,cAAC,IAAD,CAAiBY,KAAMmF,IAAQjF,MAAO,UAAWC,KAAK,OACtD,sBAAMC,MAAO,CAAEyE,UAAW,IAA1B,SACG5C,EAAQmD,YAAR,UACMnD,EAAQmD,YADd,kBAEG,uBChBD,cAA+B,IAA5BC,EAA2B,EAA3BA,YAAapD,EAAc,EAAdA,QAEvBqD,EAAUC,cAF2B,EAGC1H,mBAASoE,EAAQmD,aAHlB,mBAGpCI,EAHoC,KAGpBC,EAHoB,KAgBrC9G,EAAQ,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,yDACfL,EAAMM,iBACFoD,EAAQmD,cAAgBI,EAFb,gCAGPvD,EAAQyD,cAAc,CAC1BN,YAAaI,IAJF,OAMbH,IANa,2CAAH,sDASd,OACE,sBAAKjG,UAAU,YAAf,UACE,uBAAMT,SAAUA,EAAUS,UAAU,cAApC,UACE,uBACEd,SApBS,SAACC,GAAW,IAEfG,EACRH,EADFC,OAAUE,MAEZ+G,EAAkB/G,IAiBZW,KAAK,OACLqC,WAAS,EACTpC,YAAY,eACZZ,MAAO8G,EACPpG,UAAU,cAEZ,uBACEC,KAAK,SACLX,MAAM,iBACNU,UAAU,UACVgB,MAAO,CAAEyE,UAAW,SAGxB,sBAAMzF,UAAU,2BAA2BI,QAvCzB,WACpBlC,EAAYqI,UAEZL,EAAQM,KAAK,MAoCX,yBCYSC,EAlDG,SAAC,GAA0C,IAAxCR,EAAuC,EAAvCA,YAAaS,EAA0B,EAA1BA,WAAY7D,EAAc,EAAdA,QAC5C,OACE,eAAC,IAAD,WAEG6D,GAAc,cAAC,EAAD,CAAY7D,QAASA,IACpC,cAAC,IAAD,UACG6D,EAKC,sBACE1F,MAAO,CACL2F,SAAU,IACVC,MAAO,OACPC,OAAQ,SACRpB,UAAW,GACXE,QAAS,OACTC,eAAgB,UAPpB,UAUE,cAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CAAMlE,QAASA,MAGjB,cAAC,IAAD,CAAOiE,OAAK,EAACC,KAAK,WAAlB,SACE,cAACC,EAAD,CAASnE,QAASA,EAASoD,YAAaA,SAU5C,mCACE,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,cCWCE,MAnDf,WAAgB,IAAD,EACWxI,oBAAS,GADpB,mBACNyI,EADM,KACAC,EADA,OAEiB1I,mBAAS,MAF1B,mBAENoE,EAFM,KAEGuE,EAFH,KAmCb,OAhCAjC,qBAAU,WAKRjH,EAAYmJ,oBAAmB,SAACC,GAG5BF,EADEE,EACS,CACTtB,YAAasB,EAAKtB,YAClB3C,IAAKiE,EAAKjE,IACViD,cAAe,SAACiB,GAAD,OAAUD,EAAKhB,cAAciB,KAGnC,MAEbJ,GAAQ,QAET,IAeD,qCACGD,EACC,cAAC,EAAD,CACEjB,YAjBY,WAKlB,IAAMqB,EAAOpJ,EAAYsJ,YACzBJ,EAAW,CACTpB,YAAasB,EAAKtB,YAClB3C,IAAKiE,EAAKjE,IACViD,cAAe,SAACiB,GAAD,OAAUD,EAAKhB,cAAciB,OASxCb,WAAYe,QAAQ5E,GACpBA,QAASA,IAGX,kBAEF,4CAAgB,IAAIc,MAAO+D,YAA3B,oB,MChDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.47c8f7f9.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n\r\n// Cloud Firebase의 Database는 NoSQL\r\n// Collection: like 폴더, Document: like 문서\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  // 각 input마다 onChange 꼭 사용해야 값을 입력시 값을 받아 input에 들어감\r\n  // event는 무슨일이 일어났는가? 뜻함\r\n  // target: 변경이 일어난 부분\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  // preventDefault() 가 없으면 email, password를 입력하여 로그인 버튼을 누룰시,\r\n  // 새로고침과 함께 값들이 사라짐\r\n  const onSubmit = async (event) => {\r\n    // 페이지 새로고침을 막기 위한 preventDefault()\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        // create account\r\n        // createUserWithEmailAndPassword는 email, password를 받음\r\n        // createUserWithEmailAndPassword는 계정을 만듬과 동시에 로그인 됨\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        // log in\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        {/* input의 value는 state에 저장됨 */}\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value={newAccount ? \"Create Account\" : \"Log In\"}\r\n          className=\"authInput authSubmit\"\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span onClick={toggleAccount} className=\"authSwitch\">\r\n        {newAccount ? \"Log In\" : \"Create Account\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport AuthForm from \"components/AuthForm\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    const data = await authService.signInWithPopup(provider);\r\n    console.log(data);\r\n  };\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// isOwner => 내가 주인이면 이 버튼 fragment 들을 볼 수 있음\r\nconst JSweet = ({ jsweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false); // editing(수정) 모드인지 아닌지 구분\r\n  const [newJSweet, setNewJSweet] = useState(jsweetObj.text); // input의 값(text) 수정 -> newJSweet을 수정하는 것\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you want to delete this jsweet?\");\r\n    if (ok) {\r\n      // delete jsweet\r\n      // doc 경로는 firebase보면 됨 ( document -> collection -> jsweet의 아이디)\r\n      await dbService.doc(`jsweets/${jsweetObj.id}`).delete();\r\n      await storageService.refFromURL(jsweetObj.attachmentUrl).delete(); // url에서 reference 얻는 방법(refFromURL)\r\n    }\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`jsweets/${jsweetObj.id}`).update({\r\n      text: newJSweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewJSweet(value);\r\n  };\r\n  return (\r\n    <div className=\"jsweet\">\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container jsweetEdit\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your jsweet\"\r\n              value={newJSweet}\r\n              required\r\n              autoFocus\r\n              onChange={onChange}\r\n              classname=\"formInput\"\r\n            />\r\n            <input type=\"submit\" value=\"Update JSweet\" className=\"formBtn\" />\r\n          </form>\r\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancel\r\n          </span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{jsweetObj.text}</h4>\r\n          {jsweetObj.attachmentUrl && <img src={jsweetObj.attachmentUrl} />}\r\n          {isOwner && (\r\n            <div class=\"jsweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JSweet;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst JSweetFactory = ({ userObj }) => {\r\n  const [jsweet, setJSweet] = useState(\"\"); // form을 위한 state\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  // jsweets 가져오는 방법(게시물)\r\n  // (1) Array를 통해 onSnapshot으로 setJSweets하는 방법 (현 방식,(realtime))\r\n  // (2) forEach를 쓰는 방법 ( 구방식, query 이용하는 듯 )\r\n  const onSubmit = async (event) => {\r\n    if (jsweet === \"\") {\r\n      return;\r\n    }\r\n    // async -> await가 promise로 리턴하니까 넣어줌\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const jsweetObj = {\r\n      text: jsweet, //우리의 document의 key\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"jsweets\").add(jsweetObj);\r\n    // dbService.collection.add를 쓰기 위해선 firestore import 해주기 !\r\n    // firebaseStore에 jsweet가 collection으로 생성됨\r\n    // \"jsweets\"는 collectionPath 경로\r\n    // add 는 그냥 data가 들어가는 거\r\n    // 위를 합치면, 명시된 데이터를 담은 새로운 document를 collections에 추가하는 거\r\n\r\n    setJSweet(\"\"); // submit 하고 나면, setJSweet() 해주기\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event; // event 안에 있는 target 안에 있는 value를 가져옴\r\n    setJSweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event; // event 안에서 target 안으로 가서 파일을 받아 오는 것 의미\r\n    const theFile = files[0]; // 1) 파일을 갖고\r\n    const reader = new FileReader(); // 2) reader을 만들고\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile); // 3) readAsDataURL 을 사용해서 파일을 읽기\r\n  };\r\n  const onClearAttachment = () => setAttachment(\"\");\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={jsweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n      />\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n          />\r\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default JSweetFactory;\r\n","import JSweet from \"components/JSweet\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport JSweetFactory from \"components/JSweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [jsweets, setJSweets] = useState([]); // 배열로\r\n  // component가 mount 될 때, getJSweets를 실행\r\n  // getJSweets는 dbService를 불러와서 colletion(\"jsweets\"), 그리고 get을 써서 다 가져옴\r\n\r\n  useEffect(() => {\r\n    dbService.collection(\"jsweets\").onSnapshot((snapshot) => {\r\n      // onSnapshot (= listener) : DB의 변화를 실시간으로 알려줌(realtime)\r\n      // doc가 우리가 가지고 있는 jsweets 배열(게시물)\r\n      const jsweetArray = snapshot.docs.map((doc) => ({\r\n        // 새로운 snapshot을 배열을 만들어 state에 배열을 집어 넣음\r\n        // 모든 아이템은 아래 형태로 받음\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setJSweets(jsweetArray);\r\n    });\r\n  }, []);\r\n\r\n  // submit 할 때마다 document를 생성\r\n  return (\r\n    <div className=\"container\">\r\n      <JSweetFactory userObj={userObj} />\r\n      <div style={{ marginTop: 30 }}>\r\n        {jsweets.map((jsweet) => (\r\n          <JSweet\r\n            key={jsweet.id}\r\n            jsweetObj={jsweet} // jsweetObj는 jweet의 모든 데이터 (author, text, createdAt)\r\n            isOwner={jsweet.creatorId === userObj.uid}\r\n          /> // isOwner는 true || false 값 가짐, 글쓴이(만든사람 === 만든 사람 ID)만 볼 수 있게 하기 위함\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => (\r\n  <nav>\r\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n      <li>\r\n        <Link to=\"/\" style={{ marginRight: 10 }}>\r\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n        </Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/profile\" className=\"navStyle\">\r\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n          <span style={{ marginTop: 10 }}>\r\n            {userObj.displayName\r\n              ? `${userObj.displayName}의 Profile`\r\n              : \"Profile\"}\r\n          </span>\r\n        </Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n  // useHistory() -> history 상수를 만들어 push 함\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    // authService.currentUser.uid -> userObj를 소스 공유 없이 할 경우 uid 가져오는 방법\r\n    history.push(\"/\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          autoFocus\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{ marginTop: 10 }}\r\n        />\r\n      </form>\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\n//     // query 문\r\n// const getMyJSweets = async () => {\r\n//   const jsweets = await dbService\r\n//     .collection(\"jsweets\")\r\n//     .where(\"creatorId\", \"==\", userObj.uid) // where() => 필터링 방법\r\n//     .orderBy(\"createdAt\") // orderBy() => 결과를 어떠한 순서에 따라 필터링\r\n//     .get();\r\n//   console.log(jsweets.docs.map((doc) => doc.data()));\r\n// };\r\n// useEffect(() => {\r\n//   getMyJSweets();\r\n// }, []);\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Navigation from \"components/Navigation\";\r\nimport Profile from \"routes/Profile\";\r\n\r\n// router는 App.js에 의해서 같은 userObj prop 수신\r\n// App.js 에 있는 refreshUser 기능을 profile에도 적용시켜 줄 예정\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n  return (\r\n    <Router>\r\n      {/* && => Navigation이 존재하려면, isLoggedIn이 true여야 함 */}\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          // <>(fragment) = 많은 요소들을 render 하고 싶을 때 사용 (단, 부모 요소가 없을 때)\r\n          // div, span 이런거 쓰기 싫을 때\r\n\r\n          // 로그인 되었을 때\r\n          <div\r\n            style={{\r\n              maxWidth: 890,\r\n              width: \"100%\",\r\n              margin: \"0 auto\",\r\n              marginTop: 80,\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n              {/* Home은 userObj를 받고 있음!! */}\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n            {/* <Redirect from=\"*\" to=\"/\" /> \r\n            단, import Redirect 할 것.\r\n            Redirect는 다 \"/\"로 redirect 됨\r\n            여기서도 가능하나 Profile.js에서 프로그램상으로 \r\n            Home 페이지로 이동하는 function 추가함*/}\r\n          </div>\r\n        ) : (\r\n          // 로그인 안되었을 때 Auth\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Auth />\r\n            </Route>\r\n            {/* <Redirect from=\"*\" to=\"/\" /> \r\n            여기서도 가능하나 Profile.js에서 프로그램상으로 \r\n            Home 페이지로 이동하는 function 추가함*/}\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\n// App.js 는 onAuthStateChanged state 변화를 다룸\n// onAuthStateChanged => 로그인 || 로그아웃 || 어플리케이션 초기화 될 때 발생\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    // user의 변화를 listen 하는 곳\n    // onAuthStateChanged (= event listener)\n    // -> 유저 상태가 변할 때, 그 변화를 알아차림\n    // 유저가 로그아웃할 때 발생, 계정을 생성할 때 트리거, fireabse 초기화 할 때, 로그인 되는 순간도 앎\n    authService.onAuthStateChanged((user) => {\n      // 변화를 감지, 누군가 CreateAccount클릭, Log In, 이미 로그인 되어 있어서 fireabse는 스스로 초기화 하는 것\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true); // 언제 시작해도 onAuthStateChanged 실행을 위함\n    });\n  }, []); // , [] => 처음 시작할 때, 컴포넌트가 mount 될 떄, 실행됨!!(hooks)\n  const refreshUser = () => {\n    // updqteProfile을 사용하면 firebase 쪽에 있는 user를 새로고침 해주는데\n    // 우리 header(navigation)은 firebase에 연결 되어 있지 않음\n    // navigation은 userObj에 연결되어 있음\n    // 우리가 해야할 일: firebase의 정보를 가지고 react.js를 업데이트 해줘야 함 -> 그게 refreshUser\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        /> // userObj가 존재할 때 로그인(isLoggedIn)\n      ) : (\n        \"Initializing...\"\n      )}\n      <footer>&copy; {new Date().getFullYear} JSwitter </footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}